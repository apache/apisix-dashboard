/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UpstreamsIndexImport } from './routes/upstreams/index'
import { Route as SslIndexImport } from './routes/ssl/index'
import { Route as ServiceIndexImport } from './routes/service/index'
import { Route as SecretIndexImport } from './routes/secret/index'
import { Route as RouteIndexImport } from './routes/route/index'
import { Route as ProtosIndexImport } from './routes/protos/index'
import { Route as PluginMetadataIndexImport } from './routes/plugin-metadata/index'
import { Route as GlobalRulesIndexImport } from './routes/global-rules/index'
import { Route as ConsumerIndexImport } from './routes/consumer/index'
import { Route as UpstreamsAddImport } from './routes/upstreams/add'
import { Route as RouteAddImport } from './routes/route/add'
import { Route as ProtosAddImport } from './routes/protos/add'
import { Route as GlobalRulesAddImport } from './routes/global-rules/add'
import { Route as UpstreamsDetailUpstreamIdImport } from './routes/upstreams/detail.$upstreamId'
import { Route as ProtosDetailIdImport } from './routes/protos/detail.$id'
import { Route as GlobalRulesDetailIdImport } from './routes/global-rules/detail.$id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UpstreamsIndexRoute = UpstreamsIndexImport.update({
  id: '/upstreams/',
  path: '/upstreams/',
  getParentRoute: () => rootRoute,
} as any)

const SslIndexRoute = SslIndexImport.update({
  id: '/ssl/',
  path: '/ssl/',
  getParentRoute: () => rootRoute,
} as any)

const ServiceIndexRoute = ServiceIndexImport.update({
  id: '/service/',
  path: '/service/',
  getParentRoute: () => rootRoute,
} as any)

const SecretIndexRoute = SecretIndexImport.update({
  id: '/secret/',
  path: '/secret/',
  getParentRoute: () => rootRoute,
} as any)

const RouteIndexRoute = RouteIndexImport.update({
  id: '/route/',
  path: '/route/',
  getParentRoute: () => rootRoute,
} as any)

const ProtosIndexRoute = ProtosIndexImport.update({
  id: '/protos/',
  path: '/protos/',
  getParentRoute: () => rootRoute,
} as any)

const PluginMetadataIndexRoute = PluginMetadataIndexImport.update({
  id: '/plugin-metadata/',
  path: '/plugin-metadata/',
  getParentRoute: () => rootRoute,
} as any)

const GlobalRulesIndexRoute = GlobalRulesIndexImport.update({
  id: '/global-rules/',
  path: '/global-rules/',
  getParentRoute: () => rootRoute,
} as any)

const ConsumerIndexRoute = ConsumerIndexImport.update({
  id: '/consumer/',
  path: '/consumer/',
  getParentRoute: () => rootRoute,
} as any)

const UpstreamsAddRoute = UpstreamsAddImport.update({
  id: '/upstreams/add',
  path: '/upstreams/add',
  getParentRoute: () => rootRoute,
} as any)

const RouteAddRoute = RouteAddImport.update({
  id: '/route/add',
  path: '/route/add',
  getParentRoute: () => rootRoute,
} as any)

const ProtosAddRoute = ProtosAddImport.update({
  id: '/protos/add',
  path: '/protos/add',
  getParentRoute: () => rootRoute,
} as any)

const GlobalRulesAddRoute = GlobalRulesAddImport.update({
  id: '/global-rules/add',
  path: '/global-rules/add',
  getParentRoute: () => rootRoute,
} as any)

const UpstreamsDetailUpstreamIdRoute = UpstreamsDetailUpstreamIdImport.update({
  id: '/upstreams/detail/$upstreamId',
  path: '/upstreams/detail/$upstreamId',
  getParentRoute: () => rootRoute,
} as any)

const ProtosDetailIdRoute = ProtosDetailIdImport.update({
  id: '/protos/detail/$id',
  path: '/protos/detail/$id',
  getParentRoute: () => rootRoute,
} as any)

const GlobalRulesDetailIdRoute = GlobalRulesDetailIdImport.update({
  id: '/global-rules/detail/$id',
  path: '/global-rules/detail/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/global-rules/add': {
      id: '/global-rules/add'
      path: '/global-rules/add'
      fullPath: '/global-rules/add'
      preLoaderRoute: typeof GlobalRulesAddImport
      parentRoute: typeof rootRoute
    }
    '/protos/add': {
      id: '/protos/add'
      path: '/protos/add'
      fullPath: '/protos/add'
      preLoaderRoute: typeof ProtosAddImport
      parentRoute: typeof rootRoute
    }
    '/route/add': {
      id: '/route/add'
      path: '/route/add'
      fullPath: '/route/add'
      preLoaderRoute: typeof RouteAddImport
      parentRoute: typeof rootRoute
    }
    '/upstreams/add': {
      id: '/upstreams/add'
      path: '/upstreams/add'
      fullPath: '/upstreams/add'
      preLoaderRoute: typeof UpstreamsAddImport
      parentRoute: typeof rootRoute
    }
    '/consumer/': {
      id: '/consumer/'
      path: '/consumer'
      fullPath: '/consumer'
      preLoaderRoute: typeof ConsumerIndexImport
      parentRoute: typeof rootRoute
    }
    '/global-rules/': {
      id: '/global-rules/'
      path: '/global-rules'
      fullPath: '/global-rules'
      preLoaderRoute: typeof GlobalRulesIndexImport
      parentRoute: typeof rootRoute
    }
    '/plugin-metadata/': {
      id: '/plugin-metadata/'
      path: '/plugin-metadata'
      fullPath: '/plugin-metadata'
      preLoaderRoute: typeof PluginMetadataIndexImport
      parentRoute: typeof rootRoute
    }
    '/protos/': {
      id: '/protos/'
      path: '/protos'
      fullPath: '/protos'
      preLoaderRoute: typeof ProtosIndexImport
      parentRoute: typeof rootRoute
    }
    '/route/': {
      id: '/route/'
      path: '/route'
      fullPath: '/route'
      preLoaderRoute: typeof RouteIndexImport
      parentRoute: typeof rootRoute
    }
    '/secret/': {
      id: '/secret/'
      path: '/secret'
      fullPath: '/secret'
      preLoaderRoute: typeof SecretIndexImport
      parentRoute: typeof rootRoute
    }
    '/service/': {
      id: '/service/'
      path: '/service'
      fullPath: '/service'
      preLoaderRoute: typeof ServiceIndexImport
      parentRoute: typeof rootRoute
    }
    '/ssl/': {
      id: '/ssl/'
      path: '/ssl'
      fullPath: '/ssl'
      preLoaderRoute: typeof SslIndexImport
      parentRoute: typeof rootRoute
    }
    '/upstreams/': {
      id: '/upstreams/'
      path: '/upstreams'
      fullPath: '/upstreams'
      preLoaderRoute: typeof UpstreamsIndexImport
      parentRoute: typeof rootRoute
    }
    '/global-rules/detail/$id': {
      id: '/global-rules/detail/$id'
      path: '/global-rules/detail/$id'
      fullPath: '/global-rules/detail/$id'
      preLoaderRoute: typeof GlobalRulesDetailIdImport
      parentRoute: typeof rootRoute
    }
    '/protos/detail/$id': {
      id: '/protos/detail/$id'
      path: '/protos/detail/$id'
      fullPath: '/protos/detail/$id'
      preLoaderRoute: typeof ProtosDetailIdImport
      parentRoute: typeof rootRoute
    }
    '/upstreams/detail/$upstreamId': {
      id: '/upstreams/detail/$upstreamId'
      path: '/upstreams/detail/$upstreamId'
      fullPath: '/upstreams/detail/$upstreamId'
      preLoaderRoute: typeof UpstreamsDetailUpstreamIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/global-rules/add': typeof GlobalRulesAddRoute
  '/protos/add': typeof ProtosAddRoute
  '/route/add': typeof RouteAddRoute
  '/upstreams/add': typeof UpstreamsAddRoute
  '/consumer': typeof ConsumerIndexRoute
  '/global-rules': typeof GlobalRulesIndexRoute
  '/plugin-metadata': typeof PluginMetadataIndexRoute
  '/protos': typeof ProtosIndexRoute
  '/route': typeof RouteIndexRoute
  '/secret': typeof SecretIndexRoute
  '/service': typeof ServiceIndexRoute
  '/ssl': typeof SslIndexRoute
  '/upstreams': typeof UpstreamsIndexRoute
  '/global-rules/detail/$id': typeof GlobalRulesDetailIdRoute
  '/protos/detail/$id': typeof ProtosDetailIdRoute
  '/upstreams/detail/$upstreamId': typeof UpstreamsDetailUpstreamIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/global-rules/add': typeof GlobalRulesAddRoute
  '/protos/add': typeof ProtosAddRoute
  '/route/add': typeof RouteAddRoute
  '/upstreams/add': typeof UpstreamsAddRoute
  '/consumer': typeof ConsumerIndexRoute
  '/global-rules': typeof GlobalRulesIndexRoute
  '/plugin-metadata': typeof PluginMetadataIndexRoute
  '/protos': typeof ProtosIndexRoute
  '/route': typeof RouteIndexRoute
  '/secret': typeof SecretIndexRoute
  '/service': typeof ServiceIndexRoute
  '/ssl': typeof SslIndexRoute
  '/upstreams': typeof UpstreamsIndexRoute
  '/global-rules/detail/$id': typeof GlobalRulesDetailIdRoute
  '/protos/detail/$id': typeof ProtosDetailIdRoute
  '/upstreams/detail/$upstreamId': typeof UpstreamsDetailUpstreamIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/global-rules/add': typeof GlobalRulesAddRoute
  '/protos/add': typeof ProtosAddRoute
  '/route/add': typeof RouteAddRoute
  '/upstreams/add': typeof UpstreamsAddRoute
  '/consumer/': typeof ConsumerIndexRoute
  '/global-rules/': typeof GlobalRulesIndexRoute
  '/plugin-metadata/': typeof PluginMetadataIndexRoute
  '/protos/': typeof ProtosIndexRoute
  '/route/': typeof RouteIndexRoute
  '/secret/': typeof SecretIndexRoute
  '/service/': typeof ServiceIndexRoute
  '/ssl/': typeof SslIndexRoute
  '/upstreams/': typeof UpstreamsIndexRoute
  '/global-rules/detail/$id': typeof GlobalRulesDetailIdRoute
  '/protos/detail/$id': typeof ProtosDetailIdRoute
  '/upstreams/detail/$upstreamId': typeof UpstreamsDetailUpstreamIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/global-rules/add'
    | '/protos/add'
    | '/route/add'
    | '/upstreams/add'
    | '/consumer'
    | '/global-rules'
    | '/plugin-metadata'
    | '/protos'
    | '/route'
    | '/secret'
    | '/service'
    | '/ssl'
    | '/upstreams'
    | '/global-rules/detail/$id'
    | '/protos/detail/$id'
    | '/upstreams/detail/$upstreamId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/global-rules/add'
    | '/protos/add'
    | '/route/add'
    | '/upstreams/add'
    | '/consumer'
    | '/global-rules'
    | '/plugin-metadata'
    | '/protos'
    | '/route'
    | '/secret'
    | '/service'
    | '/ssl'
    | '/upstreams'
    | '/global-rules/detail/$id'
    | '/protos/detail/$id'
    | '/upstreams/detail/$upstreamId'
  id:
    | '__root__'
    | '/'
    | '/global-rules/add'
    | '/protos/add'
    | '/route/add'
    | '/upstreams/add'
    | '/consumer/'
    | '/global-rules/'
    | '/plugin-metadata/'
    | '/protos/'
    | '/route/'
    | '/secret/'
    | '/service/'
    | '/ssl/'
    | '/upstreams/'
    | '/global-rules/detail/$id'
    | '/protos/detail/$id'
    | '/upstreams/detail/$upstreamId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GlobalRulesAddRoute: typeof GlobalRulesAddRoute
  ProtosAddRoute: typeof ProtosAddRoute
  RouteAddRoute: typeof RouteAddRoute
  UpstreamsAddRoute: typeof UpstreamsAddRoute
  ConsumerIndexRoute: typeof ConsumerIndexRoute
  GlobalRulesIndexRoute: typeof GlobalRulesIndexRoute
  PluginMetadataIndexRoute: typeof PluginMetadataIndexRoute
  ProtosIndexRoute: typeof ProtosIndexRoute
  RouteIndexRoute: typeof RouteIndexRoute
  SecretIndexRoute: typeof SecretIndexRoute
  ServiceIndexRoute: typeof ServiceIndexRoute
  SslIndexRoute: typeof SslIndexRoute
  UpstreamsIndexRoute: typeof UpstreamsIndexRoute
  GlobalRulesDetailIdRoute: typeof GlobalRulesDetailIdRoute
  ProtosDetailIdRoute: typeof ProtosDetailIdRoute
  UpstreamsDetailUpstreamIdRoute: typeof UpstreamsDetailUpstreamIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GlobalRulesAddRoute: GlobalRulesAddRoute,
  ProtosAddRoute: ProtosAddRoute,
  RouteAddRoute: RouteAddRoute,
  UpstreamsAddRoute: UpstreamsAddRoute,
  ConsumerIndexRoute: ConsumerIndexRoute,
  GlobalRulesIndexRoute: GlobalRulesIndexRoute,
  PluginMetadataIndexRoute: PluginMetadataIndexRoute,
  ProtosIndexRoute: ProtosIndexRoute,
  RouteIndexRoute: RouteIndexRoute,
  SecretIndexRoute: SecretIndexRoute,
  ServiceIndexRoute: ServiceIndexRoute,
  SslIndexRoute: SslIndexRoute,
  UpstreamsIndexRoute: UpstreamsIndexRoute,
  GlobalRulesDetailIdRoute: GlobalRulesDetailIdRoute,
  ProtosDetailIdRoute: ProtosDetailIdRoute,
  UpstreamsDetailUpstreamIdRoute: UpstreamsDetailUpstreamIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/global-rules/add",
        "/protos/add",
        "/route/add",
        "/upstreams/add",
        "/consumer/",
        "/global-rules/",
        "/plugin-metadata/",
        "/protos/",
        "/route/",
        "/secret/",
        "/service/",
        "/ssl/",
        "/upstreams/",
        "/global-rules/detail/$id",
        "/protos/detail/$id",
        "/upstreams/detail/$upstreamId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/global-rules/add": {
      "filePath": "global-rules/add.tsx"
    },
    "/protos/add": {
      "filePath": "protos/add.tsx"
    },
    "/route/add": {
      "filePath": "route/add.tsx"
    },
    "/upstreams/add": {
      "filePath": "upstreams/add.tsx"
    },
    "/consumer/": {
      "filePath": "consumer/index.tsx"
    },
    "/global-rules/": {
      "filePath": "global-rules/index.tsx"
    },
    "/plugin-metadata/": {
      "filePath": "plugin-metadata/index.tsx"
    },
    "/protos/": {
      "filePath": "protos/index.tsx"
    },
    "/route/": {
      "filePath": "route/index.tsx"
    },
    "/secret/": {
      "filePath": "secret/index.tsx"
    },
    "/service/": {
      "filePath": "service/index.tsx"
    },
    "/ssl/": {
      "filePath": "ssl/index.tsx"
    },
    "/upstreams/": {
      "filePath": "upstreams/index.tsx"
    },
    "/global-rules/detail/$id": {
      "filePath": "global-rules/detail.$id.tsx"
    },
    "/protos/detail/$id": {
      "filePath": "protos/detail.$id.tsx"
    },
    "/upstreams/detail/$upstreamId": {
      "filePath": "upstreams/detail.$upstreamId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
