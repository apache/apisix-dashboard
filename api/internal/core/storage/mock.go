/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	"github.com/apache/apisix-dashboard/api/pkg/storage"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

// BatchDelete provides a mock function with given fields: ctx, keys
func (_m *MockInterface) BatchDelete(ctx context.Context, keys []string) error {
	ret := _m.Called(ctx, keys)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, keys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, key, val
func (_m *MockInterface) Create(ctx context.Context, key string, val string) error {
	ret := _m.Called(ctx, key, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockInterface) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, key
func (_m *MockInterface) List(ctx context.Context, key string) ([]storage_api.Keypair, error) {
	ret := _m.Called(ctx, key)

	var r0 []storage_api.Keypair
	if rf, ok := ret.Get(0).(func(context.Context, string) []storage_api.Keypair); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage_api.Keypair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, key, val
func (_m *MockInterface) Update(ctx context.Context, key string, val string) error {
	ret := _m.Called(ctx, key, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Watch provides a mock function with given fields: ctx, key
func (_m *MockInterface) Watch(ctx context.Context, key string) <-chan storage_api.WatchResponse {
	ret := _m.Called(ctx, key)

	var r0 <-chan storage_api.WatchResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan storage_api.WatchResponse); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan storage_api.WatchResponse)
		}
	}

	return r0
}
